<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[网站搬家]]></title>
    <url>%2F2017%2F04%2F27%2Fmove%2F</url>
    <content type="text"><![CDATA[这个next主题被我改得太多了，中间的修改参考了很多别人的文章。这里记录一下我在参考了众多文献后的搬家过程，具体怎么弄也可以到知乎去搜索。 上传本地文件直接在网页里，新建了一个仓库，取名为hexo。用github desktop将hexo仓库clone到本地。这里我先备份了所有的生成网页的源文件，然后拷贝所有文件到clone文件夹。 在根目录中有一个文件名为.gitignore，里面记录了所有不会被上传的文件夹。其中有些文件是没有必要被上传，纯粹拖慢速度，比如说node_modules，public(这个网站我没有用hexo d，所以没有deploy的文件夹)。这个时候要注意了，如果不在根目录添加一个文件.gitmodules，主题里面的next文件夹是不会被上传的。这个时候手动添加该文件，内容如下： [submodule &quot;themes/next&quot;] path = themes/next url = https://github.com/iissnan/hexo-theme-next 然后就可以在github desktop里面commit了再上传到github。 持续集成我这里没有添加hexo-deployer-git --save，因为觉得这种更新方式太麻烦了。我是利用Appveyor的持续集成方法，具体的可以参考Hexo的版本控制与持续集成。其实，如果你用了Appveyor，而且在新电脑上只是想添加几篇文章的话，在新电脑上直接用github desktop更新你的source文件夹就足够了。同理，可以用手机直接登录github的网页添加修改博客，随时随地写博客。但是如果你还想继续调试hexo，或者添加一些其他的功能的话，请继续往下看。 另一台电脑上的操作下载Node.js，并且安装。在新电脑上，在任意一个目录里创建名为hexo的文件夹，在里面安装hexo，在该目录下用git bash输入 npm install hexo-cli -g npm install -g hexo npm update hexo -g 然后，打开你在新电脑上安装的github desktop，clone你的hexo仓库到刚才创建的hexo文件夹。比如说你在d:/hexo这个文件夹，那你就clone到d:/。这个仓库里的文件是没法生成网页的，你缺的就是node_modules这个文件夹，所以输入npm install，最后测试输入hexo g，成功的话就可以用了。 另外，如果最后那个npm install用了之后还是无法成功，你可能要额外安装你自己曾经添加过的模块了，比如下面这些东西： npm install hexo-tag-aplayer --save npm install hexo-tag-dplayer --save npm install hexo-util --save npm install hexo-tag-cloud --save 还有什么，我想起来再添加。 本文作者： Lu Wang本文链接： http://wangwanglulu.com/2017/04/27/move/版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Hexo使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Hexo优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[图片展示]]></title>
    <url>%2F2017%2F04%2F27%2Fphoto%2F</url>
    <content type="text"><![CDATA[Hexo所提供的图片展示方法始终是有限的，但是要做一个简单而优雅的网站，太多的图片展示方式，反而会显得凌乱不堪。这里记录一下图片展示的各种方法，可以为日后的图文博客做模板。首页展示 单个图片这里仅介绍几种不改变主题太多的图片展示方式，更加深入的定义图片格式，修改css，请参考为 Hexo 主题添加多种图片样式。最简单的展示方式，就是直接在markdown的标题栏里添加链接，我们用b12.jpg这个图片做个例子。 &lt;img src=&quot;/images/b12.jpg&quot; /&gt; 如果是需要图片突破容器宽度，参照next文档，可以添加 &lt;img src=&quot;/images/b12.jpg&quot; class=&quot;full-image&quot; /&gt; 当然同样也可以使用标签方式， {% fullimage /images/b12.jpg, alt, title %} {% fi /images/b12.jpg, alt, title %} 如果你有用hexo的数据存储格式的话，就是在文章的根目录建立与markdown文件同名的文件夹，并且把图片放在里面的话，那么可以用 {% asset_img g2.jpg This is an example image %} 这里This is an example image是图片的说明。 多张图片如果想在首页添加多个图片，就必须在标题栏里添加 photos: - /images/b7.jpg - /images/b6.jpg - /images/b5.jpg 这里有三张图，所以这三张图并排在一行。如果是两张图就是，两张图并排在一行，并且把容器填满。据我自己测试，如果是四张图的话，第四张图就会被挤到第二排，然而第二排并没有被占满，后面留下丑陋的空白。如果是六张图的话，第一排三张图，第二排三张图，全部被占满，所以请思考一下用这种方式，放几张图比较好看。 这里要注意了，以上的几种图片放置方式，都是支持fancybox的。下面要说的就是next主题内置的一个图片放置方式，不支持fancybox，但是首页显示会比较好看， {% gp 4-2 %} 第一张图片的地址 第二张图片的地址 第三张图片的地址 第四张图片的地址 {% endgp %} 采用这种方式后，图片就会按照一定的方式把容器占满，当然对应不同的图片数量，可以选择不同的方式，上面的例子，可以参考本网站的博文Gallery Test。其他的图片排列方式，可以查看文件： ..\themes\next\scripts\tags\group-pictures.js 这种放置的方式，缺点就是不能使用fancybox。而且点进文章里面后，图片的排列方式就变回原来的一行一图了，就像Gallery Test那样。下面介绍在文中展示图片的方法。文中展示首先解决group-picture.js带来的问题，参考使用Hexo基于GitHub Pages搭建个人博客的办法。修改 themes\next\source\css\_common\components\tags\group-pictures.styl 中的样式为 .page-post-detail .post-body .group-picture-column { // float: none; margin-top: 10px; // width: auto !important; img { margin: 0 auto; } } 这样就没问题了，文内的布局和首页的布局一模一样。当然如果你不想这样，也可以不用修改，把这篇博客作为一个纯的gallery展示也是很优雅的。但是即便是这样，记住还是不能用fancybox。而且这种布局方式，是不能隐藏在文内的，就是说不能靠添加&lt;!-- more --&gt;来在文中展示多张图，而不显示到首页。 如果你一定要在文章并排添加多张图，只好用最后的办法，手动修改图片的引用格式，我直接添加了一个图片的class。如下这么做，我先修改了 \themes\next\source\css\_common\components\post.styl 中的样式为 .post-body .fancybox img { display: block; // !important; margin: 0 auto; cursor: pointer; cursor: zoom-in; cursor: -webkit-zoom-in; } 就是把!important去掉了。然后在 \themes\next\source\css\_custom.styl 里面添加 .img-3.img-3.img-3 { width: 33.3%; //一行三张，自己按百分比定义一行几张 display: inline-block; //单行放置 margin-bottom: -6px; //由于图片继承上一个class的底部横线，先覆盖 background: white; //定义背景色，遮盖横线 border: none; //去掉相框，可选 } 然后我们的引用图片格式是 &lt;img src=&quot;/images/wb4.jpg&quot; class=&quot;img-3&quot; /&gt; 效果如下：一张图 三张图 这样一行可以放置多个图片，也可以用fancybox了，比如可以在游记后面堆一些图，不用每张都是高清大图。另外要提一下的是，这里没有定义max-height，所以如果图片比例不一样，一行的图片会有高低不平，解决办法是：别搞一些比例奇怪的图放在一起。即使你在电脑上浏览正常，到了手机还是会出问题。 关于多张图片放置问题，更深入的修改就不知道，毕竟我的初衷不是做一个技术博客。当然如果你如只想一行放一张图，那就参考第一部分的首页展示一张图的放置方式吧。 本文作者： Lu Wang本文链接： http://wangwanglulu.com/2017/04/27/photo/版权声明： 本博客所有文章除特别声明外，均采用 CC BY-NC-SA 3.0 许可协议。转载请注明出处！]]></content>
      <categories>
        <category>Hexo使用</category>
      </categories>
      <tags>
        <tag>软件使用</tag>
        <tag>Hexo优化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于]]></title>
    <url>%2F2017%2F04%2F25%2Fbio%2F</url>
    <content type="text"><![CDATA[2017年4月25日更新。 博主是我。除了这个网站，还有用于工作的平台 (Lu’s Notebook) 以及基于wordpress的博客平台 (Lu Wang Zone)。我个人最喜欢的，就是您现在看到的这个网站。 new APlayer({ element: document.getElementById("aplayer0"), narrow: false, autoplay: false, showlrc: 0, music: { title: "To my I", author: "Keysholic", url: "/music/To my I.mp3", pic: "/music/To my I.jpg", } }); 关于个人 我是多伦多大学Rotman商学院，运筹管理的博士，是一个功利的理想主义者，爱好过于广泛，全民114。关于网站 2015有人向我咨询怎么建立网站，我当时对建站一无所知，只能坦言不会。事后，作为一个资深的全民114，自尊心作祟，开始研究网站。建立了第一个个人网站 (初代璐领域)。使用的是多伦多大学的个人空间，50M，只能上传静态网页。 这个网站用flash做的动画，内容全部手动更新，是白手起家从底层写出来的，可以说相当费劲，不易维护，遂放弃，不过目前依然可以浏览。 2016领悟了做网站最重要的不是形式，而是内容这个道理以后，开始转向wordpress平台，也就是 (Lu Wang Zone)。使用的是openshift的云计算平台，并且绑定了域名，终于进化到动态网页。 这个网站直接使用了模板，对于一个曾经从底层做网站的人来说，非常简易。但是动态网页也有缺点，而且因为openshift部署在国外，所以网站打开速度虽然不影响使用，但是用户体验并不是最佳。而且我想改模板的css，一般是没有说明文档的。 2017终于走向了程序员的世界，用github pages制作静态网页，也就是我的工作平台 (Lu’s Notebook)，和您看到的这个网站。这个网站的主题有详细的说明文档，便于我修改css，而且是极简风格，比较对我的胃口。 回顾我建站的历程，不难发现这是一个愚蠢的折腾过程，但是目前终于居有定所，倍感欣慰。 以下是上面提到的网站列表： 初代璐领域 (已弃用，仍能浏览) Lu Wang Zone (博客) Lu’s Notebook (工作，active) Lu’s Reality Marble (博客，active)]]></content>
      <categories>
        <category>Special Pages</category>
      </categories>
      <tags>
        <tag>初始网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F04%2F23%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Special Pages</category>
      </categories>
      <tags>
        <tag>初始网页</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Gallery Test]]></title>
    <url>%2F2017%2F04%2F20%2FGallery-Test%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>Special Pages</category>
      </categories>
      <tags>
        <tag>初始网页</tag>
      </tags>
  </entry>
</search>